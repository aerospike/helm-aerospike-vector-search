name: Test Chart Install and tests
permissions:
  contents: read
  pull-requests: write
on: pull_request
env: 
  WORKSPACE: "$(git rev-parse --show-toplevel)"

jobs:
  test-chart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@fe7b79cd5ee1e45176fcad797de68ecaf3ca4814
        with:
          version: latest

      - uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b
        with:
          python-version: '3.x'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b

      - name: Create kind cluster
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3

      - name: Build test init container
        run: |

          docker build -t avs-init-container:latest  ${{env.WORKSPACE}}/avs-init-container
          kind load docker-image avs-init-container:latest --name chart-testing

      - name: Setup Prerequisites
        run: |
          
          echo "Deploying AKO"
          curl -sL https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.30.0/install.sh \
          | bash -s v0.30.0
          
          kubectl create -f https://operatorhub.io/install/aerospike-kubernetes-operator.yaml
          echo "Waiting for AKO"
          while true; do
            if kubectl --namespace operators get deployment/aerospike-operator-controller-manager &> /dev/null; then
              kubectl --namespace operators wait \
                --for=condition=available --timeout=180s deployment/aerospike-operator-controller-manager
              break
            fi
          done
          
          echo "Grant permissions to the target namespace"
          kubectl create namespace aerospike
          kubectl --namespace aerospike create serviceaccount aerospike-operator-controller-manager
          kubectl create clusterrolebinding aerospike-cluster \
            --clusterrole=aerospike-cluster --serviceaccount=aerospike:aerospike-operator-controller-manager
          
          echo "Set Secrets for Aerospike Cluster"
          kubectl --namespace aerospike create secret generic aerospike-secret \
          --from-literal=features.conf="$(echo "${{ secrets.FEATURES_CONF }}")"
          
          kubectl apply -f ${{env.WORKSPACE}}/ci/aerospike.yaml --wait
      - name: Setup avs prerequisites
        run: |
          echo "Deploy MetalLB"
          kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.4/config/manifests/metallb-native.yaml
          kubectl wait --namespace metallb-system \
                          --for=condition=ready pod \
                          --selector=app=metallb \
                          --timeout=90s
          kubectl apply -f "${{env.WORKSPACE}}/examples/kind/config/metallb-config.yaml"


          echo "Deploying Istio"
          helm repo add istio https://istio-release.storage.googleapis.com/charts
          helm repo update
          helm install istio-base istio/base --namespace istio-system --set defaultRevision=default --create-namespace --wait
          helm install istiod istio/istiod --namespace istio-system --create-namespace --wait
          helm install istio-ingress istio/gateway \
          --values "${{env.WORKSPACE}}/examples/kind/config/istio-ingressgateway-values.yaml" \
          --namespace istio-ingress \
          --create-namespace \
          --wait

          kubectl apply -f "${{env.WORKSPACE}}/examples/kind/config/gateway.yaml" --wait
          kubectl apply -f "${{env.WORKSPACE}}/examples/kind/config/virtual-service-vector-search.yaml" --wait

      - name: Run chart-testing (install)
        run: |

          ct install --namespace aerospike  \
            --target-branch ${{ github.event.repository.default_branch }} --debug --helm-extra-args="--debug "\
            --helm-extra-set-args="--set initContainer.image.repository=avs-init-container --set initContainer.image.tag=latest"     
